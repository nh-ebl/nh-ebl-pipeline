% original: ghost_analysis.m
% This script reads in ghost x/y location, radius, and total position from
% excel spreadsheet, retrieves x/y location of bright stars just outside FOV from data files,
% and compares to find relationships
% Symons, May 2019
% These relationships involve x/y locations of ghosts and stars
% all graphs are color coded so they all line up too
% Edits: Thayer June 2019
close all

%% Import data from spreadsheet
% Import ghost data from previously made spreadsheet
% Script for importing data from the following spreadsheet:
%
%    Workbook: /data/symons/nh_data/mat/ghost_info.xlsx
%    Worksheet: 0plan_elon_data_wsol
%
% To extend the code for use with different selected data or a different
% spreadsheet, generate a function instead of a script.

% Auto-generated by MATLAB on 2019/05/08 14:36:25
%% Import the data old
[~, ~, oldghostinfo] = xlsread('/data/symons/NH_old_data/mat/ghosts/old_ghost_info.xlsx','old_ghost_info');
oldghostinfo = oldghostinfo(2:end,:);
oldghostinfo(cellfun(@(x) ~isempty(x) && isnumeric(x) && isnan(x),oldghostinfo)) = {''};
idx = cellfun(@ischar, oldghostinfo);
oldghostinfo(idx) = cellfun(@(x) string(x), oldghostinfo(idx), 'UniformOutput', false);

%% Import the data new
[~, ~, ghostinfo] = xlsread('/data/symons/nh_data/mat/ghost_info.xlsx','0plan_elon_data_wsol');
ghostinfo = ghostinfo(2:end,:);
ghostinfo(cellfun(@(x) ~isempty(x) && isnumeric(x) && isnan(x),ghostinfo)) = {''};
idx = cellfun(@ischar, ghostinfo);
ghostinfo(idx) = cellfun(@(x) string(x), ghostinfo(idx), 'UniformOutput', false);

%% Clear temporary variables
clearvars idx;

%% Begin ghost analysis
% Import paths for data location
paths = get_paths_old_ghosts();
npaths = get_paths_new();

% Load both data directories
%old
datafiles = dir(sprintf('%s*.mat',paths.datadir));
%new
ndatafiles= dir(sprintf('%s*.mat',npaths.datadir));

% Preallocate space for variables
ghostdist = zeros((size(datafiles,1)+size(ndatafiles,1)),1);
ghostpart = zeros((size(datafiles,1)+size(ndatafiles,1)),1);
starrad = zeros((size(datafiles,1)+size(ndatafiles,1)),1);
starxadj = zeros((size(datafiles,1)+size(ndatafiles,1)),1);
staryadj = zeros((size(datafiles,1)+size(ndatafiles,1)),1);
starxcent=zeros((size(datafiles,1)+size(ndatafiles,1)),1);
starycent=zeros((size(datafiles,1)+size(ndatafiles,1)),1);
starposadj = zeros((size(datafiles,1)+size(ndatafiles,1)),1);
ghostposadj = zeros((size(datafiles,1)+size(ndatafiles,1)),1);
ghostxadj = zeros((size(datafiles,1)+size(ndatafiles,1)),1);
ghostyadj = zeros((size(datafiles,1)+size(ndatafiles,1)),1);
ghostxcent=zeros((size(datafiles,1)+size(ndatafiles,1)),1);
ghostycent=zeros((size(datafiles,1)+size(ndatafiles,1)),1);
starcentdistall = zeros((size(datafiles,1)+size(ndatafiles,1)),1);
ghostcentdistall = zeros((size(datafiles,1)+size(ndatafiles,1)),1);
starghostdistall = zeros((size(datafiles,1)+size(ndatafiles,1)),1);
star2xadj = zeros((size(datafiles,1)+size(ndatafiles,1)),1);
star2yadj = zeros((size(datafiles,1)+size(ndatafiles,1)),1);
star2posadj = zeros((size(datafiles,1)+size(ndatafiles,1)),1);
star2xcent=zeros((size(datafiles,1)+size(ndatafiles,1)),1);
star2ycent=zeros((size(datafiles,1)+size(ndatafiles,1)),1);
brightmag= zeros((size(datafiles,1)+size(ndatafiles,1)),1);
brightmag2= zeros((size(datafiles,1)+size(ndatafiles,1)),1);
ghostmag= zeros((size(datafiles,1)+size(ndatafiles,1)),1);
cts= zeros((size(datafiles,1)+size(ndatafiles,1)),1);
ghostxguess=zeros((size(datafiles,1)+size(ndatafiles,1)),1);
ghostyguess=zeros((size(datafiles,1)+size(ndatafiles,1)),1);
ghostmagguess=zeros((size(datafiles,1)+size(ndatafiles,1)),1);
Flux= zeros((size(datafiles,1)+size(ndatafiles,1)),1);
ghostrad= zeros((size(datafiles,1)+size(ndatafiles,1)),1);
partx= zeros((size(datafiles,1)+size(ndatafiles,1)),1);
party= zeros((size(datafiles,1)+size(ndatafiles,1)),1);
dotp= zeros((size(datafiles,1)+size(ndatafiles,1)),1);
stodp= zeros((size(datafiles,1)+size(ndatafiles,1)),1);
bm1= zeros((size(datafiles,1)+size(ndatafiles,1)),1);
bm2= zeros((size(datafiles,1)+size(ndatafiles,1)),1);
bm3= zeros((size(datafiles,1)+size(ndatafiles,1)),1);
bm4= zeros((size(datafiles,1)+size(ndatafiles,1)),1);
gm1= zeros((size(datafiles,1)+size(ndatafiles,1)),1);
gm2= zeros((size(datafiles,1)+size(ndatafiles,1)),1);
gm3= zeros((size(datafiles,1)+size(ndatafiles,1)),1);
gm4= zeros((size(datafiles,1)+size(ndatafiles,1)),1);
gr1= zeros((size(datafiles,1)+size(ndatafiles,1)),1);
gr2= zeros((size(datafiles,1)+size(ndatafiles,1)),1);
gr3= zeros((size(datafiles,1)+size(ndatafiles,1)),1);
gr4= zeros((size(datafiles,1)+size(ndatafiles,1)),1);
ghostx1= zeros((size(datafiles,1)+size(ndatafiles,1)),1);
ghostx2= zeros((size(datafiles,1)+size(ndatafiles,1)),1);
ghostx3= zeros((size(datafiles,1)+size(ndatafiles,1)),1);
ghostx4= zeros((size(datafiles,1)+size(ndatafiles,1)),1);
ghosty1= zeros((size(datafiles,1)+size(ndatafiles,1)),1);
ghosty2= zeros((size(datafiles,1)+size(ndatafiles,1)),1);
ghosty3= zeros((size(datafiles,1)+size(ndatafiles,1)),1);
ghosty4= zeros((size(datafiles,1)+size(ndatafiles,1)),1);
ghostxo1= zeros((size(datafiles,1)+size(ndatafiles,1)),1);
ghostxo2= zeros((size(datafiles,1)+size(ndatafiles,1)),1);
ghostxo3= zeros((size(datafiles,1)+size(ndatafiles,1)),1);
ghostxo4= zeros((size(datafiles,1)+size(ndatafiles,1)),1);
ghostyo1= zeros((size(datafiles,1)+size(ndatafiles,1)),1);
ghostyo2= zeros((size(datafiles,1)+size(ndatafiles,1)),1);
ghostyo3= zeros((size(datafiles,1)+size(ndatafiles,1)),1);
ghostyo4= zeros((size(datafiles,1)+size(ndatafiles,1)),1);
starx1= zeros((size(datafiles,1)+size(ndatafiles,1)),1);
starx2= zeros((size(datafiles,1)+size(ndatafiles,1)),1);
starx3= zeros((size(datafiles,1)+size(ndatafiles,1)),1);
starx4= zeros((size(datafiles,1)+size(ndatafiles,1)),1);
stary1= zeros((size(datafiles,1)+size(ndatafiles,1)),1);
stary2= zeros((size(datafiles,1)+size(ndatafiles,1)),1);
stary3= zeros((size(datafiles,1)+size(ndatafiles,1)),1);
stary4= zeros((size(datafiles,1)+size(ndatafiles,1)),1);
starxo1= zeros((size(datafiles,1)+size(ndatafiles,1)),1);
starxo2= zeros((size(datafiles,1)+size(ndatafiles,1)),1);
starxo3= zeros((size(datafiles,1)+size(ndatafiles,1)),1);
starxo4= zeros((size(datafiles,1)+size(ndatafiles,1)),1);
staryo1= zeros((size(datafiles,1)+size(ndatafiles,1)),1);
staryo2= zeros((size(datafiles,1)+size(ndatafiles,1)),1);
staryo3= zeros((size(datafiles,1)+size(ndatafiles,1)),1);
staryo4= zeros((size(datafiles,1)+size(ndatafiles,1)),1);
ghostxguess1=zeros((size(datafiles,1)+size(ndatafiles,1)),1);
ghostyguess1=zeros((size(datafiles,1)+size(ndatafiles,1)),1);
ghostxguess2=zeros((size(datafiles,1)+size(ndatafiles,1)),1);
ghostyguess2=zeros((size(datafiles,1)+size(ndatafiles,1)),1);
ghostxguess3=zeros((size(datafiles,1)+size(ndatafiles,1)),1);
ghostyguess3=zeros((size(datafiles,1)+size(ndatafiles,1)),1);
ghostxguess4=zeros((size(datafiles,1)+size(ndatafiles,1)),1);
ghostyguess4=zeros((size(datafiles,1)+size(ndatafiles,1)),1);
starcentdistallp=zeros((size(datafiles,1)+size(ndatafiles,1)),1);
starcentdistall1=zeros((size(datafiles,1)+size(ndatafiles,1)),1);
starcentdistall2=zeros((size(datafiles,1)+size(ndatafiles,1)),1);
starcentdistall3=zeros((size(datafiles,1)+size(ndatafiles,1)),1);
starcentdistall4=zeros((size(datafiles,1)+size(ndatafiles,1)),1);
ghostposadjp=zeros((size(datafiles,1)+size(ndatafiles,1)),1);
ghostposadj1=zeros((size(datafiles,1)+size(ndatafiles,1)),1);
ghostposadj2=zeros((size(datafiles,1)+size(ndatafiles,1)),1);
ghostposadj3=zeros((size(datafiles,1)+size(ndatafiles,1)),1);
ghostposadj4=zeros((size(datafiles,1)+size(ndatafiles,1)),1);
ghostcentdistallp=zeros((size(datafiles,1)+size(ndatafiles,1)),1);
ghostcentdistall1=zeros((size(datafiles,1)+size(ndatafiles,1)),1);
ghostcentdistall2=zeros((size(datafiles,1)+size(ndatafiles,1)),1);
ghostcentdistall3=zeros((size(datafiles,1)+size(ndatafiles,1)),1);
ghostcentdistall4=zeros((size(datafiles,1)+size(ndatafiles,1)),1);
starposadjp=zeros((size(datafiles,1)+size(ndatafiles,1)),1);
starposadj1=zeros((size(datafiles,1)+size(ndatafiles,1)),1);
starposadj2=zeros((size(datafiles,1)+size(ndatafiles,1)),1);
starposadj3=zeros((size(datafiles,1)+size(ndatafiles,1)),1);
starposadj4=zeros((size(datafiles,1)+size(ndatafiles,1)),1);
starghostdistallp=zeros((size(datafiles,1)+size(ndatafiles,1)),1);
starghostdistall1=zeros((size(datafiles,1)+size(ndatafiles,1)),1);
starghostdistall2=zeros((size(datafiles,1)+size(ndatafiles,1)),1);
starghostdistall3=zeros((size(datafiles,1)+size(ndatafiles,1)),1);
starghostdistall4=zeros((size(datafiles,1)+size(ndatafiles,1)),1);

% Plot all ghosts together
% h = figure(1);
% clf;
% im = zeros(256);
% imagesc(im);
% hold on;
% pbaspect([1 1 1]);
% xlabel('LORRI X Pixels');
% ylabel('LORRI Y Pixels');


% For old data files
for ifile=1:size(datafiles,1)

    % Print current file number
    fprintf('On file %d of %d.\n',ifile,size(datafiles,1));

    % Load data
    load(sprintf('%s%s',paths.datadir,datafiles(ifile).name));

    % Append ghost x and y position, radius, total position, and if partial
    %these come from the excel files where the locations were predetermined
    data.ghost.ghostx = oldghostinfo{ifile,14};
    data.ghost.ghosty = oldghostinfo{ifile,15};
    data.ghost.ghostrad = oldghostinfo{ifile,16};
    data.ghost.ghostdist = oldghostinfo{ifile,17};
    data.ghost.ghostpartial = oldghostinfo{ifile,18};
    % Save x/y fit parameters to be used for ghost location prediction - generated by plots below
    data.ghost.fitx = [0.1200, 8.0714]; %also written to mat files in nh_fix_files, change there if needed
    data.ghost.fity = [0.1240, 1.9151];
    [data.ghost.ghostra,data.ghost.ghostdec]=pix2radec(data.astrometry,data.ghost.ghostx,data.ghost.ghosty);

    % If no ghost (nothing in x/y location), do nothing
    if  strcmp(data.ghost.ghostx, 0) == 1
        fprintf('No ghost ');
    else
        % If ghost exists, save ghost position
        ghostdist(ifile,1) = data.ghost.ghostdist;
        % If ghost is partial, save that information
        if strcmp(data.ghost.ghostpartial , 'partial ') == 1
            ghostpart(ifile,1) = 1;
            % If ghost not visible in set where other ghosts exist, save that
            % info
        elseif data.ghost.ghostx == 0 && strcmp(data.ghost.ghostpartial , 'partial ') ~= 1
            ghostpart(ifile,1) = 0.5;
        end

        % Calculate 'mask' of each ghost and plot - im>0 for all masks = 1, im for weighted by
        % repeated location
        %         [xgrid, ygrid] = meshgrid(1:size(data.data,2), 1:size(data.data,1));
        % Create mask where meshgrid values are less than radius distance from
        % source (adjusting back to origin in lower left corner)
        % Radius was determined by maximum possible ghost radius (18), now extended
        % to 21.5 to make up for coord prediction having some error
        %         mask = ((xgrid-(data.ghost.ghostx)).^2 + (ygrid-(data.ghost.ghosty)).^2) <= data.ghost.ghostrad.^2;
        % Set mask values to 1
        %         ghostmask = zeros(256);
        %         ghostmask(mask) = 1;
        %         im = im + ghostmask;
        %         imagesc(im>0);

        % ghost brightness analysis
        %using ap_photom, the brightness of the ghost is determined and
        %assigned to variables
        surveyarea = data.astrom.imagew.*data.astrom.imageh.*data.cal.pixsize_arcsec.^2 ./ 3600.^2;
        %                     cts(ifile,1) = ap_photom(data.data.*~data.mask.onemask,data.ghost.ghostx,data.ghost.ghosty,data.ghost.ghostrad,2,3,data,paths); %use raw data for ghost hist
        cts(ifile,1) = ap_photom(data.image.calimage.*~data.mask.oneghostlessmask,data.ghost.ghostx,data.ghost.ghosty,data.ghost.ghostrad,2,3,data,paths); %use cal data for ghost hist
        %                     Flux(ifile,1)= (cts(ifile,1)./data.astrom.exptime); % calc flux as cts/exptime (for raw data)
        %             Flux(ifile,1) = cts(ifile,1)./(1e-26.*1e9.*data.cal.nu).*(surveyarea.*(pi./180).^2)./(data.astrom.imagew.*data.astrom.imageh); % calc flux from lil (for cal data)
        Flux(ifile,1) = cts(ifile,1); % keep lil as flux
        %             ghostmag(ifile,1)=(-2.5*log10(Flux(ifile,1))+25.6884); % calc G mag with Gaia zero point
        %             ghostmag(ifile,1)=(-2.5*log10(Flux(ifile,1)/data.cal.vzero)); % Get V-band mag
        ghostmag(ifile,1) = Flux(ifile,1); % keep lil instead of mag

        % Calculate number of potential bright stars contributing to ghost
        numstars = size(data.ghost.brightmag,1);

        % Preallocate space for list of star distance to center, star
        % distance to ghost, and x and y coord of star
        stardistcent = zeros(1,numstars);
        stardistghost = zeros(1,numstars);
        starx = zeros(numstars,1);
        stary = zeros(numstars,1);

        % For all stars, retrieve x and y position
        for j = 1:numstars

            x = data.ghost.brightxpix(j,1);
            y = data.ghost.brightypix(j,1);

            % Adjust coordinates for large (654x654) grid
            if x < 0
                x = 199 + x;
            else
                x = x + 199;
            end
            if y < 0
                y = 199 + y;
            else
                y = y + 199;
            end

            % Save star x and y adjusted positions
            brightmag(ifile,1);
            starx(j,1) = x;
            stary(j,1) = y;

            % Calculate distance from center pixel to star pixel and
            % distance from star pixel to ghost pixel
            stardistcent(1,j) = sqrt((x-(199+128))^2 + (y-(199+128))^2);
            stardistghost(1,j) = sqrt((x-(199+data.ghost.ghostx))^2 + (y-(199+(data.ghost.ghosty)))^2);
        end

        % Save star to center and star to ghost distances
        data.ghost.stardistcent = stardistcent;
        data.ghost.stardistghost = stardistghost;

        % Find which star (if more than one) is closest to ghost (assuming
        % that is the cause of the ghost)
        [M,I] = min(stardistghost);
        % Save the star/ghost distance and x and y coords for the closest
        % star to ghost
        starrad(ifile,1) = M;
        starxadj(ifile,1) = starx(I,1);
        staryadj(ifile,1) = stary(I,1);

        %assigning star mag to a variable
        brightmag(ifile,1) = data.ghost.brightmag(I,1);
        ghostrad(ifile,1)= data.ghost.ghostrad;
        % For all stars, save star/cent distance, ghost/cent distance, and
        % star/ghost distance
        starcentdistall(ifile,1) = stardistcent(1,I);
        ghostcentdistall(ifile,1) = sqrt(((199+128) - (199+data.ghost.ghostx))^2 + ((199+128) - (199+data.ghost.ghosty))^2);
        starghostdistall(ifile,1) = stardistghost(1,I);
        % Save star total position, ghost total position, and ghost x and y
        % adjusted coords
        starposadj(ifile,1) = sqrt(starxadj(ifile,1)^2 + staryadj(ifile,1)^2);
        ghostposadj(ifile,1) = sqrt((199+data.ghost.ghostx)^2 + (199+data.ghost.ghosty)^2);
        ghostxadj(ifile,1) = 199+data.ghost.ghostx;
        ghostyadj(ifile,1) = 199+data.ghost.ghosty;
        % testing the location of ghosts using our prediction equation

        ghostxcent(ifile,1)= ghostxadj(ifile,1)-327;
        ghostycent(ifile,1)= ghostyadj(ifile,1)-327;
        starxcent(ifile,1)= starxadj(ifile,1)-327;
        starycent(ifile,1)= staryadj(ifile,1)-327;
        %         ghostxguess(ifile,1)= 0.1200*starxcent(ifile,1)+8.0592; %old USNOB1 fit
        %         ghostyguess(ifile,1)=0.1240*starycent(ifile,1)+1.9207; %old USNOB1 fit
        ghostxguess(ifile,1)= 0.1200*starxcent(ifile,1)+8.0714; %new GAIA fit
        ghostyguess(ifile,1)=0.1240*starycent(ifile,1)+1.9151; %new GAIA fit
        ghostmagguess(ifile,1)=1.1473*brightmag(ifile,1)+8.1212; %old USNOB1 fit

        % If more than one star per ghost (never seen more than 2), save
        % info for star that's farther away
        if( length(stardistghost) > 1 ) %check out 2 star options instances

            % Find star with max distance
            [M,I] = max(stardistghost);
            %             star2rad(ifile,1) = M;
            % Save x and y adjusted coords and adjusted total position
            star2xadj(ifile,1) = starx(I,1);
            star2yadj(ifile,1) = stary(I,1);
            star2xcent((ifile),1)= star2xadj((ifile),1)-327;
            star2ycent((ifile),1)= star2yadj((ifile),1)-327;
            brightmag2((ifile),1) = data.ghost.brightmag(I,1);
            star2posadj(ifile,1) = sqrt(star2xadj(ifile,1)^2 + star2yadj(ifile,1)^2);

            % Make plot of ghost location and bright star locations - blue for
            % regular ghost and red for partial ghost
            % this plot is for second star options, just to check them out
            %                         h = figure;
            %                         clf;
            %                         x1=200;
            %                         x2=455;
            %                         y1=200;
            %                         y2=455;
            %                         xbox = [x1, x2, x2, x1, x1];
            %                         ybox = [y1, y1, y2, y2, y1];
            %                         plot(xbox, ybox, 'k-', 'LineWidth', 3);
            %                         hold on;
            %                         xlim([0,654]);
            %                         ylim([0,654]);
            %                         pbaspect([1 1 1]);
            %                         scatter(starx,stary,'y','filled');
            %                         scatter(starx(I,1),stary(I,1),'g','filled');
            %                         if ghostpart(ifile,1) == 1
            %                             scatter(ghostxadj(ifile,1),ghostyadj(ifile,1),'r','filled');
            %                         elseif ghostpart(ifile,1) == 0
            %                             scatter(ghostxadj(ifile,1),ghostyadj(ifile,1),'b','filled');
            %                         end
            %                         title(sprintf('%s',data.header.rawfile));
            %                         if( ifile < 134 && ifile > 120 )
            %                             pause;
            %                         end
        end
        %
        %  Plot star magnitude vs ghost magnitude: Vertical plot; this displays the
        %  magnitudes organized by color, with the color representing different
        %  star magnitudes
        %                 h = figure(3);
        %                 set(h,'visible','on');
        %                 xlim([3.5,6.6]);
        %                 xlabel('Star Magnitude');
        %                 ylim([13,17]);
        %                 ylabel('Ghost Magnitude');
        %
        %                 if (brightmag((ifile),1)<4)
        %                     g1= scatter(brightmag(ifile,1),ghostmag(ifile,1),'r','filled');
        %                     hold on;
        %                 elseif ((brightmag((ifile),1)>4) && (brightmag((ifile),1)<6))
        %                     g2= scatter(brightmag(ifile,1), ghostmag(ifile,1),'m','filled');
        %                     hold on;
        %                 elseif ((brightmag((ifile),1)>6) && (brightmag((ifile),1)<6.2))
        %                     g3= scatter(brightmag(ifile,1), ghostmag(ifile,1),'c','filled');
        %                     hold on;
        %                 elseif (brightmag((ifile),1)>6.2)
        %                     g4= scatter(brightmag(ifile,1),ghostmag(ifile,1),'b','filled');
        %                     hold on;
        %                 end
        % Dot graph! Inside the box is the ghost location, outside is star location
        % but is color coded by the star magnitude
        %                 h = figure(2);
        %                 set(h,'visible','on');
        %                 x1=200;
        %                 x2=455;
        %                 y1=200;
        %                 y2=455;
        %                 xbox = [x1, x2, x2, x1, x1];
        %                 ybox = [y1, y1, y2, y2, y1];
        %                 plot(xbox, ybox, 'k-', 'LineWidth', 3);
        %                 xlim([0,654]);
        %                 ylim([0,654]);
        %                 pbaspect([1 1 1]);
        %                 hold on;
        %                  if ghostpart((ifile),1) == 1
        % %                     gg1= scatter(ghostxadj(ifile,1),ghostyadj(ifile,1),'y','filled');
        % %                     hold on;
        % %                     scatter(starxadj(ifile,1),staryadj(ifile,1),'y','filled');
        % %                  elseif (brightmag((ifile),1)~=0)
        %
        %                  elseif (brightmag((ifile),1)<4)
        %                     g1= scatter(ghostxadj(ifile,1),ghostyadj(ifile,1),'r','filled');
        %                    hold on;
        %                     scatter(starxadj((ifile),1),staryadj((ifile),1),'r','filled');
        %
        %                  elseif ((brightmag((ifile),1)>4) && (brightmag((ifile),1)<6))
        %                     g2= scatter(ghostxadj(ifile,1),ghostyadj(ifile,1),'m','filled');
        %                  hold on;
        %                     scatter(starxadj((ifile),1),staryadj((ifile),1),'m','filled');
        %
        %                  elseif ((brightmag((ifile),1)>6) && (brightmag((ifile),1)<6.2))
        %                      g3= scatter(ghostxadj(ifile,1),ghostyadj(ifile,1),'c','filled');
        %                  hold on;
        %                     scatter(starxadj((ifile),1),staryadj((ifile),1),'c','filled');
        %
        %                  elseif ((brightmag((ifile),1)>6.2))
        %                      g4= scatter(ghostxadj(ifile,1),ghostyadj(ifile,1),'b','filled');
        %                  hold on;
        %                     scatter(starxadj((ifile),1),staryadj((ifile),1),'b','filled');
        %                  end
        % th = 0:pi/50:2*pi;
        % xunit = 268*cos(th)+327;
        % yunit = 268*sin(th)+327;
        % plot(xunit,yunit,'k:');

        %                 title(sprintf('%s',data.header.rawfile));
        %                 ext = '.png';
        %                 imagename = sprintf('%s%s%s',npaths.ghostdir,data.header.timestamp,ext);
        %                 print(h,imagename, '-dpng');
        % Save new data to mat files
        %         save(sprintf('%s%s',paths.datadir,datafiles(ifile).name),'data');
        % %

        %         if( numstars > 0 )
        %             h = figure(2);
        %             set(h,'visible','off');
        %             clf;
        %             x1=-128;
        %             x2=128;
        %             y1=-128;
        %             y2=128;
        %             xbox = [x1, x2, x2, x1, x1];
        %             ybox = [y1, y1, y2, y2, y1];
        %             plot(xbox, ybox, 'k-', 'LineWidth', 3);
        %             hold on;
        %             xlim([-327,327]);
        %             ylim([-327,327]);
        %             th = 0:pi/50:2*pi;
        %             xunit = 268 * cos(th);
        %             yunit = 268 * sin(th);
        %             plot(xunit, yunit,'k--');
        %             pbaspect([1 1 1]);
        %             hold on;
        %             scatter(starxcent((ifile),1),starycent((ifile),1),'y','filled');
        %             text(starxcent((ifile),1)-26,starycent((ifile),1)+20,['m',num2str(brightmag((ifile),1))]);
        %             if numstars > 1
        %                 scatter(star2xcent((ifile),1),star2ycent((ifile),1),'g','filled');
        %                 text(star2xcent((ifile),1)-26,star2ycent((ifile),1)+20,['m',num2str(brightmag2((ifile),1))]);
        %             end
        %             if ghostpart((ifile),1) == 1
        %                 scatter(ghostxcent((ifile),1),ghostycent((ifile),1),'r','filled');
        %             elseif ghostpart((ifile),1) == 0
        %                 scatter(ghostxcent((ifile),1),ghostycent((ifile),1),'b','filled');
        %             end
        %             title(data.header.rawfile,'Interpreter','none');
        %             ext = '.png';
        %             imagename = sprintf('%s%s%s',npaths.ghostdir,data.header.timestamp,ext);
        % %             print(h,imagename, '-dpng');
        %             if( numstars > 1 )
        %                disp('woah');
        %             end
        %         end

        if ghostpart((ifile),1) == 1
            ghostxcent((ifile),1) =0;
            ghostycent((ifile),1) =0;
            starxcent((ifile),1) =0;
            starycent((ifile),1) =0;
            ghostrad((ifile),1) =0;
            ghostxguess((ifile),1)=0;
            ghostyguess((ifile),1)=0;
            starcentdistallp((ifile),1)=0;
            ghostposadjp((ifile),1)= 0;
            ghostcentdistallp((ifile),1)=0;
            starposadjp((ifile),1)=0;
            starghostdistallp((ifile),1)= 0;
        elseif (brightmag(ifile,1)<4)
            bm1((ifile),1)= brightmag((ifile),1);
            gm1(ifile,1)= ghostmag(ifile,1);
            gr1(ifile,1)= ghostrad(ifile,1);
            ghostx1((ifile),1)= ghostxadj(ifile,1);
            ghosty1((ifile),1)= ghostyadj(ifile,1);
            starx1((ifile),1)= starxadj((ifile),1);
            stary1((ifile),1)= staryadj((ifile),1);
            starxo1((ifile),1)=starxcent((ifile),1);
            staryo1((ifile),1)=starycent((ifile),1);
            ghostxo1((ifile),1)=ghostxcent((ifile),1);
            ghostyo1((ifile),1)=ghostycent((ifile),1);
            ghostxguess1((ifile),1)=ghostxguess((ifile),1);
            ghostyguess1((ifile),1)=ghostyguess((ifile),1);
            starcentdistall1((ifile),1)= starcentdistall((ifile),1);
            ghostposadj1((ifile),1)= ghostposadj((ifile),1);
            ghostcentdistall1((ifile),1)= ghostcentdistall((ifile),1);
            starposadj1((ifile),1)= starposadj((ifile),1);
            starghostdistall1((ifile),1)= starghostdistall((ifile),1);

        elseif ((brightmag((ifile),1)>4) && (brightmag((ifile),1)<6))
            bm2((ifile),1)= brightmag((ifile),1);
            gm2(ifile,1)= ghostmag(ifile,1);
            gr2(ifile,1)= ghostrad(ifile,1);
            ghostx2((ifile),1)= ghostxadj(ifile,1);
            ghosty2((ifile),1)= ghostyadj(ifile,1);
            starx2((ifile),1)= starxadj((ifile),1);
            stary2((ifile),1)= staryadj((ifile),1);
            starxo2((ifile),1)=starxcent((ifile),1);
            staryo2((ifile),1)=starycent((ifile),1);
            ghostxo2((ifile),1)=ghostxcent((ifile),1);
            ghostyo2((ifile),1)=ghostycent((ifile),1);
            ghostxguess2((ifile),1)=ghostxguess((ifile),1);
            ghostyguess2((ifile),1)=ghostyguess((ifile),1);
            starcentdistall2((ifile),1)= starcentdistall((ifile),1);
            ghostposadj2((ifile),1)= ghostposadj((ifile),1);
            ghostcentdistall2((ifile),1)= ghostcentdistall((ifile),1);
            starposadj2((ifile),1)= starposadj((ifile),1);
            starghostdistall2((ifile),1)= starghostdistall((ifile),1);
        elseif ((brightmag((ifile),1)>6) && (brightmag((ifile),1)<6.25))
            bm3((ifile),1)= brightmag((ifile),1);
            gm3(ifile,1)= ghostmag(ifile,1);
            gr3(ifile,1)= ghostrad(ifile,1);
            ghostx3((ifile),1)= ghostxadj(ifile,1);
            ghosty3((ifile),1)= ghostyadj(ifile,1);
            starx3((ifile),1)= starxadj((ifile),1);
            stary3((ifile),1)= staryadj((ifile),1);
            starxo3((ifile),1)=starxcent((ifile),1);
            staryo3((ifile),1)=starycent((ifile),1);
            ghostxo3((ifile),1)=ghostxcent((ifile),1);
            ghostyo3((ifile),1)=ghostycent((ifile),1);
            ghostxguess3((ifile),1)=ghostxguess((ifile),1);
            ghostyguess3((ifile),1)=ghostyguess((ifile),1);
            ghostposadj3((ifile),1)= ghostposadj((ifile),1);
            starcentdistall3((ifile),1)= starcentdistall((ifile),1);
            ghostcentdistall3((ifile),1)= ghostcentdistall((ifile),1);
            starposadj3((ifile),1)= starposadj((ifile),1);
            starghostdistall3((ifile),1)= starghostdistall((ifile),1);
        elseif ((brightmag((ifile),1)>6.25))
            bm4((ifile),1)= brightmag((ifile),1);
            gm4(ifile,1)= ghostmag(ifile,1);
            gr4(ifile,1)= ghostrad(ifile,1);
            ghostx4((ifile),1)= ghostxadj(ifile,1);
            ghosty4((ifile),1)= ghostyadj(ifile,1);
            starx4((ifile),1)= starxadj((ifile),1);
            stary4((ifile),1)= staryadj((ifile),1);
            starxo4((ifile),1)=starxcent((ifile),1);
            staryo4((ifile),1)=starycent((ifile),1);
            ghostxo4((ifile),1)=ghostxcent((ifile),1);
            ghostyo4((ifile),1)=ghostycent((ifile),1);
            ghostxguess4((ifile),1)=ghostxguess((ifile),1);
            ghostyguess4((ifile),1)=ghostyguess((ifile),1);
            starcentdistall4((ifile),1)= starcentdistall((ifile),1);
            ghostposadj4((ifile),1)= ghostposadj((ifile),1);
            ghostcentdistall4((ifile),1)= ghostcentdistall((ifile),1);
            starposadj4((ifile),1)= starposadj((ifile),1);
            starghostdistall4((ifile),1)= starghostdistall((ifile),1);
        end
    end
end

% For new data files
for ifile=1:size(ndatafiles,1)

    % Print current file number
    fprintf('\nOn file %d of %d.',ifile,size(ndatafiles,1));

    % Load data
    load(sprintf('%s%s',npaths.datadir,ndatafiles(ifile).name));

    % Append ghost x and y position, radius, total position, and if partial
    data.ghost.ghostx = ghostinfo{ifile,14};
    data.ghost.ghosty = ghostinfo{ifile,15};
    data.ghost.ghostrad = ghostinfo{ifile,16};
    data.ghost.ghostdist = ghostinfo{ifile,17};
    data.ghost.ghostpartial = ghostinfo{ifile,18};
    % Save x/y fit parameters to be used for ghost location prediction - generated by plots below
    data.ghost.fitx = [0.1200, 8.0714]; %also written to mat files in nh_fix_files, change there if needed
    data.ghost.fity = [0.1240, 1.9151];

    % If no ghost, do nothing
    if strcmp(data.ghost.ghostx , '') == 1 || data.ghost.ghostx == 0

        fprintf(' No ghost.');
    else
        [data.ghost.ghostra,data.ghost.ghostdec]=pix2radec(data.astrometry,data.ghost.ghostx,data.ghost.ghosty);
        % If ghost exists, save ghost position
        ghostdist((ifile+16),1) = data.ghost.ghostdist;
        % If ghost is partial, save that information
        if strcmp(data.ghost.ghostpartial , 'partial ') == 1
            ghostpart((ifile+16),1) = 1;
            % If ghost not visible in set where other ghosts exist, save that
            % info
            ghostrad((ifile+16),1)= data.ghost.ghostrad;
        elseif data.ghost.ghostx == 0 && strcmp(data.ghost.ghostpartial , 'partial ') ~= 1
            ghostpart((ifile+16),1) = 0.5;

        end

        % Plot all ghost 'masks' together - im>0 for all masks = 1, im for weighted by
        % repeated location
        %         [xgrid, ygrid] = meshgrid(1:size(data.data,2), 1:size(data.data,1));
        % Create mask where meshgrid values are less than radius distance from
        % source (adjusting back to origin in lower left corner)
        % Radius was determined by maximum possible ghost radius (18), now extended
        % to 21.5 to make up for coord prediction having some error
        %         mask = ((xgrid-(data.ghost.ghostx)).^2 + (ygrid-(data.ghost.ghosty)).^2) <= data.ghost.ghostrad.^2;
        % Set mask values to 1
        %         ghostmask = zeros(256);
        %         ghostmask(mask) = 1;
        %         im = im + ghostmask;
        %         imagesc(im>0);

        % Calculate number of potential bright stars contributing to ghost
        numstars = size(data.ghost.brightmag,1);

        % Preallocate space for list of star distance to center, star
        % distance to ghost, and x and y coord of star
        stardistcent = zeros(1,numstars);
        stardistghost = zeros(1,numstars);
        starx = zeros(numstars,1);
        stary = zeros(numstars,1);

        % For all stars, retrieve x and y position
        for j = 1:numstars


            x = data.ghost.brightxpix(j,1);
            y = data.ghost.brightypix(j,1);

            % Adjust coordinates for large (654x654) grid
            if x < 0
                x = 199 + x;
            else
                x = x + 199;
            end
            if y < 0
                y = 199 + y;
            else
                y = y + 199;
            end

            % Save star x and y adjusted positions
            starx(j,1) = x;
            stary(j,1) = y;

            % Calculate distance from center pixel to star pixel and
            % distance from star pixel to ghost pixel
            stardistcent(1,j) = sqrt((x-(199+128))^2 + (y-(199+128))^2);
            stardistghost(1,j) = sqrt((x-(199+data.ghost.ghostx))^2 + (y-(199+(data.ghost.ghosty)))^2);
        end

        % Save star to center and star to ghost distances
        data.ghost.stardistcent = stardistcent;
        data.ghost.stardistghost = stardistghost;

        % Find which star (if more than one) is closest to ghost (assuming
        % that is the cause of the ghost)
        [M,I] = min(stardistghost);
        % Save the star/ghost distance and x and y coords for the closest
        % star to ghost
        starrad((ifile+16),1) = M;
        starxadj((ifile+16),1) = starx(I,1);
        staryadj((ifile+16),1) = stary(I,1);
        starxcent((ifile+16),1)= starxadj((ifile+16),1)-327;
        starycent((ifile+16),1)= staryadj((ifile+16),1)-327;

        % For all stars, save star/cent distance, ghost/cent distance, and
        % star/ghost distance
        starcentdistall((ifile+16),1) = stardistcent(1,I);
        ghostcentdistall((ifile+16),1) = sqrt(((199+128) - (199+data.ghost.ghostx))^2 + ((199+128) - (199+data.ghost.ghosty))^2);
        starghostdistall((ifile+16),1) = stardistghost(1,I);
        % Save star total position, ghost total position, and ghost x and y
        % adjusted coords
        ghostxadj((ifile+16),1) = 199+data.ghost.ghostx;
        ghostyadj((ifile+16),1) = 199+data.ghost.ghosty;
        ghostxcent((ifile+16),1)= ghostxadj((ifile+16),1)-327;
        ghostycent((ifile+16),1)= ghostyadj((ifile+16),1)-327;
        starposadj((ifile+16),1) = sqrt(starxadj((ifile+16),1)^2 + staryadj((ifile+16),1)^2);
        ghostposadj((ifile+16),1) = sqrt((199+data.ghost.ghostx)^2 + (199+data.ghost.ghosty)^2);

        %assigning star magnitude to a variable
        if strcmp(data.ghost.ghostpartial , 'partial ') == 1
            brightmag((ifile+16),1) = data.ghost.brightmag(I,1);
        elseif data.ghost.ghostx == 0 && strcmp(data.ghost.ghostpartial , 'partial ') ~= 1

        else
            %using ap_photom, the brightness of the ghost is determined and
            %assigned to variables
            %                     cts(ifile+16,1) = ap_photom(data.data.*~data.mask.onemask,data.ghost.ghostx,data.ghost.ghosty,data.ghost.ghostrad,2,3,data,paths); %use raw data for ghost hist
            cts(ifile+16,1) = ap_photom(data.image.calimage.*~data.mask.oneghostlessmask,data.ghost.ghostx,data.ghost.ghosty,data.ghost.ghostrad,2,3,data,paths); %use cal data for ghost hist
            %                     Flux(ifile+16,1)= (cts(ifile+16,1)./data.astrom.exptime); % calc flux as cts/exptime (for raw data)
            %             Flux(ifile+16,1) = cts(ifile+16,1)./(1e-26.*1e9.*data.cal.nu).*(surveyarea.*(pi./180).^2)./(data.astrom.imagew.*data.astrom.imageh); % calc flux from lil (for cal data)
            Flux(ifile+16,1) = cts(ifile+16,1); % keep lil as flux
            %             ghostmag(ifile+16,1)=(-2.5*log10(Flux(ifile+16,1))+25.6884); % calc G mag with Gaia zero point
            %             ghostmag(ifile+16,1)=(-2.5*log10(Flux(ifile+16,1)/data.cal.vzero)); % Get V-band mag
            ghostmag(ifile+16,1) = Flux(ifile+16,1); % keep lil instead of mag
            brightmag((ifile+16),1) = data.ghost.brightmag(I,1);
            ghostmagguess((ifile+16),1)=1.1473*brightmag((ifile+16),1)+8.1212; %old USNOB1 fit
            ghostrad((ifile+16),1)= data.ghost.ghostrad;
            ghostxcent((ifile+16),1)= ghostxadj((ifile+16),1)-327;
            ghostycent((ifile+16),1)= ghostyadj((ifile+16),1)-327;
            %             ghostxguess((ifile+16),1)= 0.1200*starxcent((ifile+16),1)+8.0592; %old USNOB1 fit
            %             ghostyguess((ifile+16),1)= 0.1240*starycent((ifile+16),1)+1.9207; %old USNOB1 fit
            ghostxguess((ifile+16),1)= 0.1200*starxcent((ifile+16),1)+8.0714; %new GAIA fit
            ghostyguess((ifile+16),1)= 0.1240*starycent((ifile+16),1)+1.9151; %new GAIA fit
        end

        % If more than one star per ghost (never seen more than 2), save
        % info for star that's farther away
        if( length(stardistghost) > 1 ) %check out 2 star options instances

            % Find star with max distance
            [M,I] = max(stardistghost);
            %             star2rad(ifile,1) = M;
            % Save x and y adjusted coords and adjusted total position
            star2xadj((ifile+16),1) = starx(I,1);
            star2yadj((ifile+16),1) = stary(I,1);
            star2xcent((ifile+16),1)= star2xadj((ifile+16),1)-327;
            star2ycent((ifile+16),1)= star2yadj((ifile+16),1)-327;
            brightmag2((ifile+16),1) = data.ghost.brightmag(I,1);
            star2posadj((ifile+16),1) = sqrt(star2xadj((ifile+16),1)^2 + star2yadj((ifile+16),1)^2);

            % Make plot of ghost location and bright star locations - blue for
            % regular ghost and red for partial ghost
            % this plot is for second star options, just to check them out
            %                         cntr= cntr+1;
            %                         h = figure(cntr);
            %                         clf;
            %                         x1=200;
            %                         x2=455;
            %                         y1=200;
            %                         y2=455;
            %                         xbox = [x1, x2, x2, x1, x1];
            %                         ybox = [y1, y1, y2, y2, y1];
            %                         plot(xbox, ybox, 'k-', 'LineWidth', 3);
            %                         hold on;
            %                         xlim([0,654]);
            %                         ylim([0,654]);
            %                         pbaspect([1 1 1]);
            %                         scatter(starx,stary,'y','filled');
            %                         scatter(starx(I,1),stary(I,1),'g','filled');
            %                         if ghostpart((ifile+16),1) == 1ifile
            %                             scatter(ghostxadj((ifile+16),1),ghostyadj((ifile+16),1),'r','filled');
            %                         elseif ghostpart((ifile+16),1) == 0
            %                             scatter(ghostxadj((ifile+16),1),ghostyadj((ifile+16),1),'b','filled');
            %                         end
            %                         title(sprintf('%s',data.header.rawfile));
            %                         if( (ifile+16) < 134 && (ifile+16) > 120 )
            %                             pause;
            %                         end
            %                           hold off;
        end
        %  Plot star magnitude vs ghost magnitude: Vertical plot; this displays the
        %  magnitudes organized by color, with the color representing different
        %  star magnitudes
        %                 h = figure(3);
        %                 set(h,'visible','on');
        %                 xlim([3.5,6.6]);
        %                 xlabel('Star Magnitude');
        %                 ylim([13,17]);
        %                 ylabel('Ghost Magnitude');
        %
        %                 if (brightmag((ifile+16),1)<4)
        %                     g1= scatter(brightmag((ifile+16),1),ghostmag((ifile+16),1),'r','filled');
        %                     hold on;
        %                 elseif ((brightmag((ifile+16),1)>4) && (brightmag((ifile+16),1)<6))
        %                     g2= scatter(brightmag(ifile,1), ghostmag(ifile,1),'m','filled');
        %                     hold on;
        %                 elseif ((brightmag((ifile+16),1)>6) && (brightmag((ifile+16),1)<6.2))
        %                     g3= scatter(brightmag((ifile+16),1), ghostmag((ifile+16),1),'c','filled');
        %                     hold on;
        %                 elseif (brightmag((ifile+16),1)>6.2)
        %                     g4= scatter(brightmag((ifile+16),1),ghostmag((ifile+16),1),'b','filled');
        %                     hold on;
        %                 end
        % Dot graph! Inside the box is the ghost location, outside is star location
        % but is color coded by the star magnitude
        %                 h = figure(2);
        %                 set(h,'visible','on');
        %                 x1=200;
        %                 x2=455;
        %                 y1=200;
        %                 y2=455;
        %                 xbox = [x1, x2, x2, x1, x1];
        %                 ybox = [y1, y1, y2, y2, y1];
        %                 plot(xbox, ybox, 'k-', 'LineWidth', 3);
        %                 xlim([0,654]);
        %                 ylim([0,654]);
        %                 pbaspect([1 1 1]);
        %                 hold on;
        %                  if ghostpart((ifile+16),1) == 1
        % %                     gg1= scatter(ghostxadj((ifile+16),1),ghostyadj((ifile+16),1),'y','filled');
        % %                     hold on;
        % %                     scatter(starxadj((ifile+16),1),staryadj((ifile+16),1),'y','filled');
        % %                  elseif (brightmag((ifile+16),1)~=0)
        %
        %                  elseif (brightmag((ifile+16),1)<4)
        %                     g1= scatter(ghostxadj((ifile+16),1),ghostyadj((ifile+16),1),'r','filled');
        %                    hold on;
        %                     scatter(starxadj((ifile+16),1),staryadj((ifile+16),1),'r','filled');
        %
        %                  elseif ((brightmag((ifile+16),1)>4) && (brightmag((ifile+16),1)<6))
        %                     g2= scatter(ghostxadj((ifile+16),1),ghostyadj((ifile+16),1),'m','filled');
        %                  hold on;
        %                     scatter(starxadj((ifile+16),1),staryadj((ifile+16),1),'m','filled');
        %
        %                  elseif ((brightmag((ifile+16),1)>6) && (brightmag((ifile+16),1)<6.2))
        %                      g3= scatter(ghostxadj((ifile+16),1),ghostyadj((ifile+16),1),'c','filled');
        %                  hold on;
        %                     scatter(starxadj((ifile+16),1),staryadj((ifile+16),1),'c','filled');
        %
        %                  elseif ((brightmag((ifile+16),1)>6.2))
        %                      g4= scatter(ghostxadj((ifile+16),1),ghostyadj((ifile+16),1),'b','filled');
        %                  hold on;
        %                     scatter(starxadj((ifile+16),1),staryadj((ifile+16),1),'b','filled');
        %
        %                  end
        % th = 0:pi/50:2*pi;
        % xunit = 268*cos(th)+327;
        % yunit = 268*sin(th)+327;
        % plot(xunit,yunit, 'k:');

        %                 title(sprintf('%s',data.header.rawfile));
        %                 ext = '.png';
        %                 imagename = sprintf('%s%s%s',npaths.ghostdir,data.header.timestamp,ext);
        %                 print(h,imagename, '-dpng');
        %
        %         if( numstars > 0 )
        %             h = figure(2);
        %             set(h,'visible','off');
        %             clf;
        %             x1=-128;
        %             x2=128;
        %             y1=-128;
        %             y2=128;
        %             xbox = [x1, x2, x2, x1, x1];
        %             ybox = [y1, y1, y2, y2, y1];
        %             plot(xbox, ybox, 'k-', 'LineWidth', 3);
        %             hold on;
        %             xlim([-327,327]);
        %             ylim([-327,327]);
        %             th = 0:pi/50:2*pi;
        %             xunit = 268 * cos(th);
        %             yunit = 268 * sin(th);
        %             plot(xunit, yunit,'k--');
        %             pbaspect([1 1 1]);
        %             hold on;
        %             scatter(starxcent((ifile+16),1),starycent((ifile+16),1),'y','filled');
        %             text(starxcent((ifile+16),1)-26,starycent((ifile+16),1)+20,['m',num2str(brightmag((ifile+16),1))]);
        %             if numstars > 1
        %                 scatter(star2xcent((ifile+16),1),star2ycent((ifile+16),1),'g','filled');
        %                 text(star2xcent((ifile+16),1)-26,star2ycent((ifile+16),1)+20,['m',num2str(brightmag2((ifile+16),1))]);
        %             end
        %             if ghostpart((ifile+16),1) == 1
        %                 scatter(ghostxcent((ifile+16),1),ghostycent((ifile+16),1),'r','filled');
        %             elseif ghostpart((ifile+16),1) == 0
        %                 scatter(ghostxcent((ifile+16),1),ghostycent((ifile+16),1),'b','filled');
        %             end
        %             title(data.header.rawfile,'Interpreter','none');
        %             ext = '.png';
        %             imagename = sprintf('%s%s%s',npaths.ghostdir,data.header.timestamp,ext);
        % %             print(h,imagename, '-dpng');
        %             if( numstars > 1 )
        %                disp('woah');
        %             end
        %         end


        %for color coding graphs
        if ghostpart((ifile+16),1) == 1
            ghostxcent((ifile+16),1) =0;
            ghostycent((ifile+16),1) =0;
            starxcent((ifile+16),1) =0;
            starycent((ifile+16),1) =0;
            ghostrad((ifile+16),1) =0;
            ghostxguess((ifile+16),1)=0;
            ghostyguess((ifile+16),1)=0;
            starcentdistallp((ifile+16),1)=0;
            ghostposadjp((ifile+16),1)=0;
            ghostcentdistallp((ifile+16),1)=0;
            starposadjp((ifile+16),1)=0;
            starghostdistallp((ifile+16),1)= 0;
        elseif (brightmag((ifile+16),1)<4)
            bm1((ifile+16),1)= brightmag((ifile+16),1);
            gm1((ifile+16),1)= ghostmag((ifile+16),1);
            gr1((ifile+16),1)= ghostrad((ifile+16),1);
            ghostx1((ifile+16),1)= ghostxadj((ifile+16),1);
            ghosty1((ifile+16),1)= ghostyadj((ifile+16),1);
            starx1((ifile+16),1)= starxadj((ifile+16),1);
            stary1((ifile+16),1)= staryadj((ifile+16),1);
            starxo1((ifile+16),1)=starxcent((ifile+16),1);
            staryo1((ifile+16),1)=starycent((ifile+16),1);
            ghostxo1((ifile+16),1)= ghostxcent((ifile+16),1);
            ghostyo1((ifile+16),1)= ghostycent((ifile+16),1);
            ghostxguess1((ifile+16),1)=ghostxguess((ifile+16),1);
            ghostyguess1((ifile+16),1)=ghostyguess((ifile+16),1);
            starcentdistall1((ifile+16),1)= starcentdistall((ifile+16),1);
            ghostposadj1((ifile+16),1)= ghostposadj((ifile+16),1);
            ghostcentdistall1((ifile+16),1)= ghostcentdistall((ifile+16),1);
            starposadj1((ifile+16),1)= starposadj((ifile+16),1);
            starghostdistall1((ifile+16),1)= starghostdistall((ifile+16),1);
        elseif ((brightmag((ifile+16),1)>4) && (brightmag((ifile+16),1)<6))
            bm2((ifile+16),1)= brightmag((ifile+16),1);
            gm2((ifile+16),1)= ghostmag((ifile+16),1);
            gr2((ifile+16),1)= ghostrad((ifile+16),1);
            ghostx2((ifile+16),1)= ghostxadj((ifile+16),1);
            ghosty2((ifile+16),1)= ghostyadj((ifile+16),1);
            starx2((ifile+16),1)= starxadj((ifile+16),1);
            stary2((ifile+16),1)= staryadj((ifile+16),1);
            starxo2 ((ifile+16),1)=starxcent((ifile+16),1);
            staryo2((ifile+16),1)=starycent((ifile+16),1);
            ghostxo2((ifile+16),1)= ghostxcent((ifile+16),1);
            ghostyo2((ifile+16),1)= ghostycent((ifile+16),1);
            ghostxguess2((ifile+16),1)=ghostxguess((ifile+16),1);
            ghostyguess2((ifile+16),1)=ghostyguess((ifile+16),1);
            starcentdistall2((ifile+16),1)= starcentdistall((ifile+16),1);
            ghostposadj2((ifile+16),1)= ghostposadj((ifile+16),1);
            ghostcentdistall2((ifile+16),1)= ghostcentdistall((ifile+16),1);
            starposadj2((ifile+16),1)= starposadj((ifile+16),1);
            starghostdistall2((ifile+16),1)= starghostdistall((ifile+16),1);
        elseif ((brightmag((ifile+16),1)>6) && (brightmag((ifile+16),1)<6.25))
            bm3((ifile+16),1)= brightmag((ifile+16),1);
            gm3((ifile+16),1)= ghostmag((ifile+16),1);
            gr3((ifile+16),1)= ghostrad((ifile+16),1);
            ghostx3 ((ifile+16),1)= ghostxadj((ifile+16),1);
            ghosty3((ifile+16),1)= ghostyadj((ifile+16),1);
            starx3((ifile+16),1)= starxadj((ifile+16),1);
            stary3((ifile+16),1)= staryadj((ifile+16),1);
            starxo3((ifile+16),1)=starxcent((ifile+16),1);
            staryo3((ifile+16),1)=starycent((ifile+16),1);
            ghostxo3((ifile+16),1)= ghostxcent((ifile+16),1);
            ghostyo3((ifile+16),1)=ghostycent((ifile+16),1);
            ghostxguess3((ifile+16),1)=ghostxguess((ifile+16),1);
            ghostyguess3((ifile+16),1)=ghostyguess((ifile+16),1);
            starcentdistall3((ifile+16),1)= starcentdistall((ifile+16),1);
            ghostposadj3((ifile+16),1)= ghostposadj((ifile+16),1);
            ghostcentdistall3((ifile+16),1)= ghostcentdistall((ifile+16),1);
            starposadj3((ifile+16),1)= starposadj((ifile+16),1);
            starghostdistall3((ifile+16),1)= starghostdistall((ifile+16),1);
        elseif ((brightmag((ifile+16),1)>6.25))
            bm4((ifile+16),1)= brightmag((ifile+16),1);
            gm4((ifile+16),1)= ghostmag((ifile+16),1);
            gr4((ifile+16),1)= ghostrad((ifile+16),1);
            ghostx4((ifile+16),1)= ghostxadj((ifile+16),1);
            ghosty4((ifile+16),1)= ghostyadj((ifile+16),1);
            starx4((ifile+16),1)= starxadj((ifile+16),1);
            stary4((ifile+16),1)= staryadj((ifile+16),1);
            starxo4((ifile+16),1)=starxcent((ifile+16),1);
            staryo4((ifile+16),1)=starycent((ifile+16),1);
            ghostxo4((ifile+16),1)=ghostxcent((ifile+16),1);
            ghostyo4((ifile+16),1)=ghostycent((ifile+16),1);
            ghostxguess4((ifile+16),1)=ghostxguess((ifile+16),1);
            ghostyguess4((ifile+16),1)=ghostyguess((ifile+16),1);
            starcentdistall4((ifile+16),1)= starcentdistall((ifile+16),1);
            ghostposadj4((ifile+16),1)= ghostposadj((ifile+16),1);
            ghostcentdistall4((ifile+16),1)= ghostcentdistall((ifile+16),1);
            starposadj4((ifile+16),1)= starposadj((ifile+16),1);
            starghostdistall4((ifile+16),1)= starghostdistall((ifile+16),1);
        end
    end
    % Save new data to mat files
    %     save(sprintf('%s%s',npaths.datadir,ndatafiles(ifile).name),'data');
end

% Plot total ghost radius on plot of all ghosts
% th = 0:pi/50:2*pi;
% xunit = 58.2*cos(th)+128;
% yunit = 58.2*sin(th)+128;
% plot(xunit,yunit);
% set(gca,'YDir','normal');

%% Graphs

% % Plot star magnitude vs ghost magnitude: Vertical plot; this displays the
% % magnitudes organized by color, with the color representing different
% % star magnitudes
figure(1);
% plot mean of ghost intensity for each star
mg1= scatter(mean(bm1(bm1~=0)),mean(log10(gm1(gm1~=0))),'r','filled');
hold on;
mg2= scatter(mean(bm2(bm2~=0)),mean(log10(gm2(gm2~=0))),'m','filled');
hold on;
mg3= scatter(mean(bm3(bm3~=0)),mean(log10(gm3(gm3~=0))),'c','filled');
hold on;
mg4= scatter(mean(bm4(bm4~=0)),mean(log10(gm4(gm4~=0))),'b','filled');

ghost_int = [mean(log10(gm1(gm1~=0))),mean(log10(gm2(gm2~=0))),mean(log10(gm3(gm3~=0))),mean(log10(gm4(gm4~=0)))];
star_mag = [mean(bm1(bm1~=0)),mean(bm2(bm2~=0)),mean(bm3(bm3~=0)),mean(bm4(bm4~=0))];

% put std error bars on mean intensity for each star
errorbar(mean(bm1(bm1~=0)),mean(log10(gm1(gm1~=0))), std(log10(gm1(gm1~=0))), 'LineStyle','none','Color','k');
errorbar(mean(bm2(bm2~=0)),mean(log10(gm2(gm2~=0))), std(log10(gm2(gm2~=0))), 'LineStyle','none','Color','k');
errorbar(mean(bm3(bm3~=0)),mean(log10(gm3(gm3~=0))), std(log10(gm3(gm3~=0))), 'LineStyle','none','Color','k');
errorbar(mean(bm4(bm4~=0)),mean(log10(gm4(gm4~=0))), std(log10(gm4(gm4~=0))), 'LineStyle','none','Color','k');

int_err = [std(log10(gm1(gm1~=0))),std(log10(gm2(gm2~=0))),std(log10(gm3(gm3~=0))),std(log10(gm4(gm4~=0)))];

% plot all points divided by bright star mag
% mg1= scatter(bm1(bm1~=0),gm1(gm1~=0),'r','filled');
% hold on;
% mg2= scatter(bm2(bm2~=0),gm2(gm2~=0),'m','filled');
% hold on;
% mg3= scatter(bm3(bm3~=0),gm3(gm3~=0),'c','filled');
% hold on;
% mg4= scatter(bm4(bm4~=0),gm4(gm4~=0),'b','filled');

% put std error bars on each point
% errorbar(bm1(bm1~=0), gm1(gm1~=0), std(gm1(gm1~=0))*ones(size(gm1(gm1~=0))), 'LineStyle','none','Color','k');
% errorbar(bm2(bm2~=0), gm2(gm2~=0), std(gm2(gm2~=0))*ones(size(gm2(gm2~=0))), 'LineStyle','none','Color','k');
% errorbar(bm3(bm3~=0), gm3(gm3~=0), std(gm3(gm3~=0))*ones(size(gm3(gm3~=0))), 'LineStyle','none','Color','k');
% errorbar(bm4(bm4~=0), gm4(gm4~=0), std(gm4(gm4~=0))*ones(size(gm4(gm4~=0))), 'LineStyle','none','Color','k');

% linear fit to all points
% [fitall,S]= polyfit(brightmag(brightmag~=0),log10(ghostmag(ghostmag~=0)),1);
% starfit=linspace(min(brightmag(brightmag~=0)),max(brightmag(brightmag~=0)));
% ghostfit=(fitall(1)*starfit + fitall(2));
% fit1 = plot (starfit, ghostfit);

% linear fit to means for each star
% [fitmean,Smean]= polyfit(star_mag,ghost_int,1);
[fitobject,gof,output] = fit(reshape(star_mag,[numel(star_mag),1]),ghost_int','poly1','Weights',int_err);
alpha = 0.95;
ci = confint(fitobject, alpha);
t = tinv((1+alpha)/2, gof.dfe);
se = (ci(2,:)-ci(1,:)) ./ (2*t); % Standard Error from confidence intervals

% apply fit
starfit=linspace(min(star_mag),max(star_mag));
% ghostfit=(fitmean(1)*starfit + fitmean(2));
ghostfit=(fitobject.p1*starfit + fitobject.p2);

% calculate variance-covariance matrix
pCov = inv(output.Jacobian'*output.Jacobian)*((output.residuals'*output.residuals)./(numel(star_mag) - 2)); % -2 for the 2 variables in y = m*x + b

% fit solution using fitlm
mdl = fitlm(reshape(star_mag,[numel(star_mag),1])',ghost_int,'Weight',int_err'); %
pCov_mdl = mdl.CoefficientCovariance;

% fit solution using nlinfit
mdl_fun = @(b,x)(b(1)*x+b(2)); %fitlm's order is backwards (so b(1) is the intercept, etc.)
[mdl_beta,mdl_R,mdl_J,mdl_CovB,mdl_MSE,mdl_ErrorModelInfo] = nlinfit(reshape(star_mag,[numel(star_mag),1])',ghost_int,mdl_fun,[1,1],'Weight',int_err);
mdl_CovB; % var-cov matrix from fit directly
% var-cov matrix from Jacobian and residuals
pCov_mdl_CovB = inv(mdl_J'*mdl_J)*((mdl_R'*mdl_R)./(numel(star_mag) - 2)); % -2 for the 2 variables in y = m*x + b

% fit solution using handmade linear_fit
fitter = linear_fit(reshape(star_mag,[numel(star_mag),1]),ghost_int',int_err');
fitter.covMat; % var-cov matrix from fit
W = eye(numel(star_mag) ).*int_err'; % Weight matrix
% var-cov matrix from Jacobian and residuals with weighting added
inv(fitter.Jacobian'*W*fitter.Jacobian)*((fitter.residuals'*W*fitter.residuals)./(numel(star_mag) - 2)); % The Jacobian/residual out of fitter doesn't have the weight matrix built in, so it needs to be added

% [y_fit,delta] = polyval(fitmean,starfit ,Smean);
% fit2 = plot(starfit,y_fit);
% fit2err = plot(starfit,y_fit+mean(delta),'Marker','none','LineStyle','--','Color','#77AC30');
% plot(starfit,y_fit-mean(delta),'Marker','none','LineStyle','--','Color','#77AC30');
fit2 = plot(starfit,ghostfit);
fit2err = plot(starfit,ghostfit+gof.rmse,'Marker','none','LineStyle','--','Color','#77AC30');
plot(starfit,ghostfit-gof.rmse,'Marker','none','LineStyle','--','Color','#77AC30');
% fit2 = plot (starfit, ghostfit);

% set(gca, 'YScale', 'log');
% text(5,13.5,'y=1.1473x + 8.1212'); % old line of best fit (USNOB1 data)
% title(sprintf('Fit all points: y = %.2fx + %.2f; Fit mean points: y = %.2fx + %.2f',fit(1),fit(2),fitmean(1),fitmean(2))); % new line of best fit (GAIA data)
title(sprintf('Fit mean points: y = %.2fx + %.2f',fitobject.p1,fitobject.p2)); % new line of best fit (GAIA data)
% legend([mg1,mg2,mg3,mg4,fit1,fit2],{'Mag 3.88','Mag 5.97','Mag 6.21','Mag 6.29','Fit All Points','Fit Mean Points'},'Location','southwest');
legend([mg1,mg2,mg3,mg4,fit2,fit2err],{'Mag 3.88','Mag 5.97','Mag 6.21','Mag 6.29','Fit Mean Points','Fit Mean Error'},'Location','southwest');
xlabel('Star Magnitude');
% ylabel('Number of Pixels * Ghost Peak Intensity [nW m^{-2} sr^{-1}]');
% ylabel('Ghost Peak Intensity [nW m^{-2} sr^{-1}]');
ylabel('Mean(Log(Number of Pixels * Ghost Mean Intensity)) [nW m^{-2} sr^{-1}]');
% ylabel('Mean(Log(Ghost Peak Intensity)) [nW m^{-2} sr^{-1}]');

%
% % Dot graph! Inside the box is the ghost location, outside is star location
% % but is color coded by the star magnitude
figure(3);
x1=-128;
x2=128;
y1=-128;
y2=128;
xbox = [x1, x2, x2, x1, x1];
ybox = [y1, y1, y2, y2, y1];
plot(xbox, ybox, 'k-', 'LineWidth', 3);
hold on;
xlim([-327,327]);
ylim([-327,327]);
th = 0:pi/50:2*pi;
xunit = 274.5 * cos(th);
yunit = 274.5 * sin(th);
h = plot(xunit, yunit,'k--');
pbaspect([1 1 1]);
hold on;
g1= scatter(ghostxo1(ghostxo1~=0),ghostyo1(ghostyo1~=0),'r');
hold on;
scatter(starxo1(starxo1~=0),staryo1(staryo1~=0),'r','filled','p');
g2= scatter(ghostxo2(ghostxo2~=0),ghostyo2(ghostyo2~=0),'m');
hold on;
scatter(starxo2(starxo2~=0),staryo2(staryo2~=0),'m','filled','p');
g3= scatter(ghostxo3(ghostxo3~=0),ghostyo3(ghostyo3~=0),'c');
hold on;
scatter(starxo3(starxo3~=0),staryo3(staryo3~=0),'c','filled','p');
g4= scatter(ghostxo4(ghostxo4~=0),ghostyo4(ghostyo4~=0),'b');
hold on;
scatter(starxo4(starxo4~=0),staryo4(staryo4~=0),'b','filled','p');
xlabel('LORRI X Pixels');
ylabel('LORRI Y Pixels');
legend([g1,g2,g3,g4],{'Mag 3.88','Mag 5.97','Mag 6.21','Mag 6.29'},'Location','southeast');

%
% th = 0:pi/50:2*pi;
% xunit = 268*cos(th)+0;
% yunit = 268*sin(th)+0;
% figure(3);
% plot(xunit,yunit, 'k--');
% legend([g1,g2,g3,g4],{'Star 1','Star 2','Star 3','Star 4',});
%
% % ghost radius vs ghost magnitude
% figure(4);
%     hold on;
%     xlabel('Ghost Radius');
%     ylabel('Ghost Magnitude');
%     g1= scatter(gr1(gr1~=0),gm1(gm1~=0),'r', 'filled');
%     g2= scatter(gr2(gr2~=0),gm2(gm2~=0),'m', 'filled');
%     g3= scatter(gr3(gr3~=0),gm3(gm3~=0),'c', 'filled');
%     g4= scatter(gr4(gr4~=0),gm4(gm4~=0),'b', 'filled');
%     legend([g1,g2,g3,g4],{'Star 1','Star 2','Star 3','Star 4',});
%
% % Plot ghost total position vs distance from center to closest star
% figure(5);
%     hold on;
%     %     scatter(starcentdistall(starcentdistall~=0),ghostposadj(ghostposadj~=0));
%     scatter(starcentdistall1(starcentdistall1~=0),ghostposadj1(ghostposadj1~=0),'r','filled');
%     scatter(starcentdistall2(starcentdistall2~=0),ghostposadj2(ghostposadj2~=0),'m','filled');
%     scatter(starcentdistall3(starcentdistall3~=0),ghostposadj3(ghostposadj3~=0),'c','filled');
%     scatter(starcentdistall4(starcentdistall4~=0),ghostposadj4(ghostposadj4~=0),'b','filled');
%     xlabel('Distance from center to star');
%     ylabel('Ghost position');
%
% % Plot distance from center to ghost vs distance from center to star
% figure(6);
%     hold on;
%     %     scatter(starcentdistall(starcentdistall~=0),ghostcentdistall(ghostcentdistall~=0));
%     scatter(starcentdistall1(starcentdistall1~=0),ghostcentdistall1(ghostcentdistall1~=0),'r','filled');
%     scatter(starcentdistall2(starcentdistall2~=0),ghostcentdistall2(ghostcentdistall2~=0),'m','filled');
%     scatter(starcentdistall3(starcentdistall3~=0),ghostcentdistall3(ghostcentdistall3~=0),'c','filled');
%     scatter(starcentdistall4(starcentdistall4~=0),ghostcentdistall4(ghostcentdistall4~=0),'b','filled');
%     xlabel('Distance from center to star');
%     ylabel('Distance from center to ghost');
%
% % Plot ghost total position vs star total position
% figure(7);
%     hold on;
%     %     scatter(starposadj(starposadj~=0),ghostposadj(ghostposadj~=0));
%     scatter(starposadj1(starposadj1~=0),ghostposadj1(ghostposadj1~=0),'r','filled');
%     scatter(starposadj2(starposadj2~=0),ghostposadj2(ghostposadj2~=0),'m','filled');
%     scatter(starposadj3(starposadj3~=0),ghostposadj3(ghostposadj3~=0),'c','filled');
%     scatter(starposadj4(starposadj4~=0),ghostposadj4(ghostposadj4~=0),'b','filled');
%     posfit=polyfit(starposadj(starposadj~=0),ghostposadj(ghostposadj~=0),1);
%     starpos=linspace(min(starposadj(starposadj~=0)), max(starposadj(starposadj~=0)));
%     ghostpos= (posfit(1)*starpos + posfit(2));
% %     plot(starpos, ghostpos);
%     text(x,y,'y=0.1232x +409.2169');
%     xlabel('Star position');
%     ylabel('Ghost position');
%
% % Plot distance from star to ghost vs distance from center to star
% figure(8);
%     hold on;
%     %     scatter(starcentdistall(starcentdistall~=0),starghostdistall(starghostdistall~=0));
%     scatter(starcentdistall1(starcentdistall1~=0),starghostdistall1(starghostdistall1~=0),'r','filled');
%     scatter(starcentdistall2(starcentdistall2~=0),starghostdistall2(starghostdistall2~=0),'m','filled');
%     scatter(starcentdistall3(starcentdistall3~=0),starghostdistall3(starghostdistall3~=0),'c','filled');
%     scatter(starcentdistall4(starcentdistall4~=0),starghostdistall4(starghostdistall4~=0),'b','filled');
%     xlabel('Distance from center to star');
%     ylabel('Distance from star to ghost');
%     % Optionally, add second (farther away) star data to this plot
%     % hold on;
%     % scatter(star2posadj,ghostposadj,'MarkerEdgeColor','r');
%
%% Possible polar graphs below ()
%(theta,rho)
% [startadj,starradj]=cart2pol(starxcent, starycent);
% startadj= rad2deg(startadj);
% [ghosttadj,ghostradj]=cart2pol(ghostxcent, ghostycent);
% ghosttadj= rad2deg(ghosttadj);
%
% [start1,starr1]=cart2pol(starxo1, staryo1);
% start1= rad2deg(start1);
% [start2,starr2]=cart2pol(starxo2, staryo2);
% start2= rad2deg(start2);
% [start3,starr3]=cart2pol(starxo3, staryo3);
% start3= rad2deg(start3);
% [start4,starr4]=cart2pol(starxo4, staryo4);
% start4= rad2deg(start4);
%
% [ghostt1,ghostr1]=cart2pol(ghostxo1, ghostyo1);
% ghostt1= rad2deg(ghostt1);
% [ghostt2,ghostr2]=cart2pol(ghostxo2, ghostyo2);
% ghostt2= rad2deg(ghostt2);
% [ghostt3,ghostr3]=cart2pol(ghostxo3, ghostyo3);
% ghostt3= rad2deg(ghostt3);
% [ghostt4,ghostr4]=cart2pol(ghostxo4, ghostyo4);
% ghostt4= rad2deg(ghostt4);

% % star rho vs ghost radius
% figure(9);
% hold on;
% %     scatter(starradj(starradj~=0),ghostrad(ghostrad~=0)); gr= ghostrad
% %     starr= star rho
%     scatter(starr1(starr1~=0), gr1(gr1~=0), 'r', 'filled');
%     scatter(starr2(starr2~=0), gr2(gr2~=0), 'm', 'filled');
%     scatter(starr3(starr3~=0), gr3(gr3~=0), 'c', 'filled');
%     scatter(starr4(starr4~=0), gr4(gr4~=0), 'b', 'filled');
%     xlabel('Star Rho');
%     ylabel('Ghost radius');
%
% % Plot star rho position vs ghost rho position
% figure(10);
%     hold on;
%     g1= scatter(starr1(starr1~=0), ghostr1(ghostr1~=0),'r','filled');
%     g2= scatter(starr2(starr2~=0), ghostr2(ghostr2~=0),'m','filled');
%     g3= scatter(starr3(starr3~=0), ghostr3(ghostr3~=0),'c','filled');
%     g4= scatter(starr4(starr4~=0), ghostr4(ghostr4~=0),'b','filled');
%     fitr=polyfit(starradj(starradj~=0),ghostradj(ghostradj~=0),1);
%     starrfit= linspace(min(starradj(starradj~=0)),max(starradj(starradj~=0)));
%     ghostrfit= (fitr(1).*starrfit + fitr(2));
%     plot(starrfit,ghostrfit);
%     xlabel('Star rho position');
%     ylabel('Ghost rho position');
%     text(215,30,'y= -0.1855x + 64.8986');
%     legend([g1,g2,g3,g4],{'Star 1','Star 2','Star 3','Star 4',});
%
% % Plot star theta position vs ghost theta position
% figure(11);
%     hold on;
%     g1= scatter(start1(start1~=0), ghostt1(ghostt1~=0),'r','filled');
%     g2= scatter(start2(start2~=0), ghostt2(ghostt2~=0),'m','filled');
%     g3= scatter(start3(start3~=0), ghostt3(ghostt3~=0),'c','filled');
%     g4= scatter(start4(start4~=0), ghostt4(ghostt4~=0),'b','filled');
%     xlabel('Star theta position');
%     ylabel('Ghost theta position');
%     fitt=polyfit(startadj(startadj~=0),ghosttadj(ghosttadj~=0),1);
%     startfit= linspace(min(startadj(startadj~=0)),max(startadj(startadj~=0)));
%     ghosttfit= (fitt(1).*startfit + fitt(2));
%     plot(startfit,ghosttfit);
%     text(-50,100,'y=0.8885x - 4.9179');
%     legend([g1,g2,g3,g4],{'Star 1','Star 2','Star 3','Star 4',});
%
% %starx vs ghostx
figure(12);
hold on;
g1= scatter(starxo1(starxo1~=0),ghostxo1(ghostxo1~=0),'r','filled');
hold on;
g2= scatter(starxo2(starxo2~=0),ghostxo2(ghostxo2~=0),'m','filled');
hold on;
g3= scatter(starxo3(starxo3~=0),ghostxo3(ghostxo3~=0),'c','filled');
hold on;
g4= scatter(starxo4(starxo4~=0),ghostxo4(ghostxo4~=0),'b','filled');
hold on;
xlabel('Star X Pixel');
ylabel('Ghost X Pixel');
fitxo=polyfit(starxcent(starxcent~=0),ghostxcent(ghostxcent~=0),1);
starxo= linspace(min(starxcent(starxcent~=0)),max(starxcent(starxcent~=0)));
xoeq=fitxo(1)*starxcent+fitxo(2);
plot(starxcent,xoeq);
% text(50,-5,'y=0.1200x +8.0592'); %old fit from USNOB1
title(sprintf('y = %.2fx + %.2f',fitxo(1),fitxo(2))); % new line of best fit (GAIA data)
legend([g1,g2,g3,g4],{'Star 1','Star 2','Star 3','Star 4',});
%
% %stary vs ghosty
figure(13);
hold on;
g1= scatter(staryo1(staryo1~=0),ghostyo1(ghostyo1~=0),'r','filled');
hold on;
g2= scatter(staryo2(staryo2~=0),ghostyo2(ghostyo2~=0),'m','filled');
hold on;
g3= scatter(staryo3(staryo3~=0),ghostyo3(ghostyo3~=0),'c','filled');
hold on;
g4= scatter(staryo4(staryo4~=0),ghostyo4(ghostyo4~=0),'b','filled');
hold on;
xlabel('Star Y Pixel');
ylabel('Ghost Y Pixel');
fityo=polyfit(starycent(starycent~=0),ghostycent(ghostycent~=0),1);
staryo=linspace(min(starycent(starycent~=0)),max(starycent(starycent~=0)));
yoeq= fityo(1)*starycent+fityo(2);
plot(starycent, yoeq);
% text(100,-5,'y=0.1240x +1.9207'); %old fit from USNOB1
title(sprintf('y = %.2fx + %.2f',fityo(1),fityo(2))); % new line of best fit (GAIA data)
legend([g1,g2,g3,g4],{'Star 1','Star 2','Star 3','Star 4',});

% %ghost location x test
% figure(14);
% hold on;
% g1= scatter(ghostxo1(ghostxo1~=0), ghostxguess1(ghostxguess1~=0),'r', 'filled');
% g2= scatter(ghostxo2(ghostxo2~=0), ghostxguess2(ghostxguess2~=0),'m', 'filled');
% g3= scatter( ghostxo3(ghostxo3~=0),ghostxguess3(ghostxguess3~=0),'c', 'filled');
% g4= scatter(ghostxo4(ghostxo4~=0), ghostxguess4(ghostxguess4~=0),'b', 'filled');
% guesslinex= linspace(min(ghostxcent(ghostxcent~=0)),max(ghostxcent(ghostxcent~=0)));
% guessguessx= linspace(min(ghostxguess(ghostxguess~=0)),max(ghostxguess(ghostxguess~=0)));
% plot(guesslinex(guesslinex~=0),guessguessx(guessguessx~=0));
% xlabel('Expected X');
% ylabel('Guess X');
% legend([g1,g2,g3,g4],{'Star 1','Star 2','Star 3','Star 4',});
%
% %ghost location y test
% figure(15);
% hold on;
% g1= scatter( ghostyo1(ghostyo1~=0),ghostyguess1(ghostyguess1~=0),'r', 'filled');
% g2= scatter( ghostyo2(ghostyo2~=0),ghostyguess2(ghostyguess2~=0),'m', 'filled');
% g3= scatter( ghostyo3(ghostyo3~=0),ghostyguess3(ghostyguess3~=0),'c', 'filled');
% g4= scatter( ghostyo4(ghostyo4~=0),ghostyguess4(ghostyguess4~=0),'b', 'filled');
% guessliney= linspace(min(ghostycent(ghostycent~=0)),max(ghostycent(ghostycent~=0)));
% guessguessy= linspace(min(ghostyguess(ghostyguess~=0)),max(ghostyguess(ghostyguess~=0)));
% plot(guessliney(guessliney~=0),guessguessy(guessguessy~=0));
% xlabel('Expected Y');
% ylabel('Guess Y');
% legend([g1,g2,g3,g4],{'Star 1','Star 2','Star 3','Star 4',});
%
%
% %actual X - guess vs actual
% figure(16);
% title('X');
% xlabel('expected');
% ylabel('expected - guess');
% amgx1= ghostxo1 - ghostxguess1;
% amgx2= ghostxo2 - ghostxguess2;
% amgx3= ghostxo3 - ghostxguess3;
% amgx4= ghostxo4 - ghostxguess4;
% hold on;
% g1= scatter(ghostxo1(ghostxo1~=0),amgx1(amgx1~=0), 'r','filled');
% g2= scatter(ghostxo2(ghostxo2~=0),amgx2(amgx2~=0), 'm','filled');
% g3= scatter(ghostxo3(ghostxo3~=0),amgx3(amgx3~=0), 'c','filled');
% g4= scatter(ghostxo4(ghostxo4~=0),amgx4(amgx4~=0), 'b','filled');
% legend([g1,g2,g3,g4],{'Star 1','Star 2','Star 3','Star 4',});
%
% %actual Y - guess vs actual
% figure(17);
% title('Y');
% xlabel('expected');
% ylabel('expected - guess');
% amgy1= ghostyo1 - ghostyguess1;
% amgy2= ghostyo2 - ghostyguess2;
% amgy3= ghostyo3 - ghostyguess3; 
% amgy4= ghostyo4 - ghostyguess4;
% hold on;
% g1= scatter(ghostyo1(ghostyo1~=0) ,amgy1(amgy1~=0), 'r','filled');
% g2= scatter(ghostyo2(ghostyo2~=0) ,amgy2(amgy2~=0), 'm','filled');
% g3= scatter(ghostyo3(ghostyo3~=0) ,amgy3(amgy3~=0), 'c','filled');
% g4= scatter(ghostyo4(ghostyo4~=0) ,amgy4(amgy4~=0), 'b','filled');
% legend([g1,g2,g3,g4],{'Star 1','Star 2','Star 3','Star 4',});

fprintf('done')
